@inject Microsoft.Extensions.Localization.IStringLocalizer<NavMenu> _localizer
@using System.Security.Claims

<UserCard />
<MudNavMenu>
    <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Outlined.Home">@_localizer["Home"]</MudNavLink>
    @if (_canViewHangfire)
    {
        <MudNavLink Href="/jobs" Target="_blank" Icon="@Icons.Material.Outlined.Work">
            @_localizer["Hangfire"]
        </MudNavLink>
    }
    <MudNavLink Href="/swagger/index.html" Target="_blank" Icon="@Icons.Material.Outlined.LiveHelp">
        @_localizer["Swagger"]
    </MudNavLink>
    @if (_canViewDashboards)
    {
        <MudNavLink Href="/dashboard" Icon="@Icons.Material.Outlined.Dashboard">
            @_localizer["Dashboard"]
        </MudNavLink>
    }
    <MudNavLink Href="/account" Icon="@Icons.Material.Outlined.SupervisorAccount">
        @_localizer["Account"]
    </MudNavLink>
    @if (_canViewAuditTrails)
    {
        <MudNavLink Href="/audit-trails" Icon="@Icons.Material.Outlined.Security">
            @_localizer["Audit Trails"]
        </MudNavLink>
    }
    @if (_canViewDocuments || _canViewDocumentTypes)
    {
        <MudNavGroup Title="@_localizer["Document"]" Expanded="false" Icon="@Icons.Material.Outlined.Book">
            @if (_canViewDocuments)
            {
                <MudNavLink Href="/document-store" Icon="@Icons.Material.Outlined.AttachFile">
                    @_localizer["Document Store"]
                </MudNavLink>
            }
            @if (_canViewDocumentTypes)
            {
                <MudNavLink Href="/document-types" Icon="@Icons.Material.Outlined.FileCopy">
                    @_localizer["Document Types"]
                </MudNavLink>
            }
        </MudNavGroup>
    }

    @if (_canViewUsers || _canViewRoles)
    {
        <MudNavGroup Title="@_localizer["Security"]" Expanded="true" Icon="@Icons.Material.Outlined.Security">
            @if (_canViewUsers)
            {
                <MudNavLink Href="/identity/users" Icon="@Icons.Material.Outlined.Person">
                    @_localizer["Users"]
                </MudNavLink>
            }
            @if (_canViewRoles)
            {
                <MudNavLink Href="/identity/roles" Icon="@Icons.Material.Outlined.Person">@_localizer["Roles"]</MudNavLink>
            }
        </MudNavGroup>
    }

    @if (_canViewCompanies)
    {
        <MudNavGroup Title="@_localizer["Company"]" Expanded="false" Icon="@Icons.Material.Outlined.BusinessCenter">
            @if (_canViewCompanies)
            {
                <MudNavLink Href="/core/companies" Icon="@Icons.Material.Outlined.Business">
                    @_localizer["Companies"]
                </MudNavLink>
            }
            @if (_canViewEmployees)
            {
                <MudNavLink Href="/core/employees" Icon="@Icons.Material.Outlined.People">
                    @_localizer["Employees"]
                </MudNavLink>
            }
        </MudNavGroup>
    }

    @if (_canViewProjects)
    {
<MudNavGroup Title="@_localizer["Project"]" Expanded="false" Icon="@Icons.Material.Outlined.GroupWork">

    @if (_canViewClients)
    {
        <MudNavLink Href="/project/clients" Icon="@Icons.Material.Outlined.Business">
            @_localizer["Clients"]
        </MudNavLink>
    }
    @if (_canViewCategories)
    {
        <MudNavLink Href="/project/categories" Icon="@Icons.Material.Outlined.Category">
            @_localizer["Categories"]
        </MudNavLink>
    }
    @if (_canViewPriorities)
    {
        <MudNavLink Href="/project/priorities" Icon="@Icons.Material.Outlined.LowPriority">
            @_localizer["Priorities"]
        </MudNavLink>
    }
    @if (_canViewStatuses)
    {
        <MudNavLink Href="/project/statuses" Icon="@Icons.Material.Outlined.Timer">
            @_localizer["Statuses"]
        </MudNavLink>
    }
    @if (_canViewProjects)
    {
        <MudNavLink Href="/project/projects" Icon="@Icons.Material.Outlined.Work">
            @_localizer["Projects"]
        </MudNavLink>
    }
</MudNavGroup>
    }

    @if (_canViewChat)
    {
        <MudNavLink Href="/chat" Icon="@Icons.Material.Outlined.Chat">
            @_localizer["Chat"]
        </MudNavLink>
    }
    @if (_canViewProducts || _canViewBrands)
    {
        <MudNavGroup Title="@_localizer["Catalog"]" Expanded="false" Icon="@Icons.Material.Outlined.Shop">
            @if (_canViewProducts)
            {
                <MudNavLink Href="/catalog/products" Icon="@Icons.Material.Outlined.CallToAction">
                    @_localizer["Products"]
                </MudNavLink>
            }
            @if (_canViewBrands)
            {
                <MudNavLink Href="/catalog/brands" Icon="@Icons.Material.Outlined.CallToAction">
                    @_localizer["Brands"]
                </MudNavLink>
            }
        </MudNavGroup>
    }
</MudNavMenu>

@code {
    private ClaimsPrincipal _authenticationStateProviderUser;

    private bool _canViewHangfire;
    private bool _canViewDashboards;
    private bool _canViewDocuments;
    private bool _canViewDocumentTypes;
    private bool _canViewAuditTrails;
    private bool _canViewRoles;
    private bool _canViewUsers;
    private bool _canViewChat;
    private bool _canViewProducts;
    private bool _canViewBrands;
    private bool _canViewCompanies;
    private bool _canViewEmployees;
    private bool _canViewCategories;
    private bool _canViewPriorities;
    private bool _canViewStatuses;
    private bool _canViewProjects;
    private bool _canViewClients;

    protected override async Task OnParametersSetAsync()
    {
        _authenticationStateProviderUser = await _stateProvider.GetAuthenticationStateProviderUserAsync();
        _canViewHangfire = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Hangfire.View)).Succeeded;
        _canViewDashboards = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Dashboards.View)).Succeeded;
        _canViewDocuments = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Documents.View)).Succeeded;
        _canViewDocumentTypes = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.DocumentTypes.View)).Succeeded;
        _canViewAuditTrails = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.AuditTrails.View)).Succeeded;
        _canViewRoles = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Roles.View)).Succeeded;
        _canViewUsers = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Users.View)).Succeeded;
        _canViewChat = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Communication.Chat)).Succeeded;
        _canViewProducts = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Products.View)).Succeeded;
        _canViewBrands = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Brands.View)).Succeeded;
        _canViewCompanies = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Companies.View)).Succeeded;
        _canViewEmployees = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Employees.View)).Succeeded;
        _canViewCategories = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Categories.View)).Succeeded;
        _canViewPriorities = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Priorities.View)).Succeeded;
        _canViewStatuses = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Statuses.View)).Succeeded;
        _canViewProjects = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Projects.View)).Succeeded;
        _canViewClients = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Clients.View)).Succeeded;
    }
}