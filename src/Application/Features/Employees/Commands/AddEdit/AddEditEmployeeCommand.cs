using AutoMapper;
using MediatR;
using Microsoft.Extensions.Localization;
using RuS.Application.Interfaces.Repositories;
using RuS.Application.Interfaces.Services;
using RuS.Application.Requests;
using RuS.Domain.Entities.Core;
using RuS.Shared.Wrapper;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory.Database;

namespace RuS.Application.Features.Employees.Commands.AddEdit
{
    public class AddEditEmployeeCommand : IRequest<Result<int>>
    {
        #region Properties
        public int Id { get; set; }
        public int CompanyId { get; set; }
        //Generated by system
        //public string EmployeeNo { get; set; }
        public string FirstName { get; set; }

        public string MiddleName { get; set; }

        public string LastName { get; set; }

        public string Gender { get; set; }

        public string ImageUrl { get; set; }

        public DateTime? DateOfBirth { get; set; }

        public string CellphoneNo { get; set; }

        public string Email { get; set; }

        public string Street { get; set; }

        public string Suburb { get; set; }

        public string City { get; set; }

        public string Postcode { get; set; }

        public UploadRequest UploadRequest { get; set; }
        #endregion
    }

    public class AddEditEmployeeCommandHandler : IRequestHandler<AddEditEmployeeCommand, Result<int>>
    {
        private readonly IUnitOfWork<int> _unitOfWork;
        private readonly IMapper _mapper;
        private readonly IStringLocalizer<AddEditEmployeeCommandHandler> _localizer;
        private readonly IEmployeeRepository _employeeRepository;
        private readonly IUploadService _uploadService;
        public AddEditEmployeeCommandHandler(IUnitOfWork<int> unitOfWork, IMapper mapper, IStringLocalizer<AddEditEmployeeCommandHandler> localizer, IEmployeeRepository employeeRepository, IUploadService uploadService)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
            _localizer = localizer;
            _employeeRepository = employeeRepository;
            _uploadService = uploadService;
        }

        public async Task<Result<int>> Handle(AddEditEmployeeCommand command, CancellationToken cancellationToken)
        {
            var uploadRequest = command.UploadRequest;
            if (uploadRequest != null)
            {
                uploadRequest.FileName = $"EMP-{command.FirstName}{uploadRequest.Extension}";
            }

            if (command.Id == 0)
            {
                var notUnique = await _employeeRepository.IsUniqueEntry(command.FirstName, command.LastName, (DateTime)command.DateOfBirth, command.CompanyId);
                if (notUnique)
                {
                    return await Result<int>.FailAsync(_localizer["Employee already exists."]);
                }
                else
                {
                    Employee employee = _mapper.Map<Employee>(command);

                    //Generate employee no
                    employee.EmployeeNo = _employeeRepository.GenerateEmployeeNo();
                    //Upload image
                    if (uploadRequest != null)
                    {
                        employee.ImageUrl = _uploadService.UploadAsync(uploadRequest);
                    }
                    await _unitOfWork.Repository<Employee>().AddAsync(employee);
                    await _unitOfWork.Commit(cancellationToken);
                    return await Result<int>.SuccessAsync(employee.Id, _localizer["Employee Saved"]);
                }
            }
            else
            {
                var notUnique = await _employeeRepository.IsUniqueEntry(command.FirstName, command.LastName, (DateTime)command.DateOfBirth, command.CompanyId, command.Id);
                if (notUnique)
                {
                    return await Result<int>.FailAsync(_localizer["Employee already exists."]);
                }
                else
                {
                    var employee = await _unitOfWork.Repository<Employee>().GetByIdAsync(command.Id);
                    if (employee != null)
                    {
                        employee.FirstName = command.FirstName ?? employee.FirstName;
                        employee.LastName = command.LastName ?? employee.LastName;
                        employee.MiddleName = command.MiddleName ?? employee.MiddleName;
                        employee.Street = command.Street ?? employee.Street;
                        employee.DateOfBirth = (DateTime)command.DateOfBirth;
                        employee.Email = command.Email ?? employee.Email;
                        employee.Gender = command.Gender ?? employee.Gender;
                        employee.CellphoneNo = command.CellphoneNo ?? employee.CellphoneNo;
                        employee.Street = command.Street ?? employee.Street;
                        employee.Suburb = command.Suburb ?? employee.Suburb;
                        employee.City = command.City ?? employee.City;
                        employee.Postcode = command.Postcode ?? employee.Postcode;

                        //Upload image
                        if (uploadRequest != null)
                        {
                            employee.ImageUrl = _uploadService.UploadAsync(uploadRequest);
                        }
                        await _unitOfWork.Repository<Employee>().UpdateAsync(employee);
                        await _unitOfWork.Commit(cancellationToken);
                        return await Result<int>.SuccessAsync(employee.Id, _localizer["Employee Updated"]);
                    }
                    else
                    {
                        return await Result<int>.FailAsync("Employee Not Found!");
                    }
                }
            }
        }
    }
}
